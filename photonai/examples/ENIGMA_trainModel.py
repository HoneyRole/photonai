from photonai.base.PhotonBase import Hyperpipe, PipelineElement, OutputSettingsfrom photonai.investigator.Investigator import Investigatorfrom sklearn.model_selection import KFold#import seaborn as snsimport csvimport pandas as pdimport numpy as np# define foldersfolder = ''# Regression with the ENIGMA BrainAge dataset# gender = 'Female'gender = 'Male'd = ''setID = 'train'X = pd.read_csv(folder + d + setID + 'Controls' + gender + 's_raw.csv', header=0, delimiter=',')# get targets and drop target column in Xy = X.Age.valuesX = X.drop(labels=['Age'], axis=1).values# DESIGN YOUR PIPELINEpipe_name = 'ENIGMA_final'res_file = folder + 'results_' + pipe_name + '.p'best_model_file = folder + 'best_model_' + pipe_name + '_' + gender + '.photon'pers_opts = OutputSettings(local_file=res_file,                           save_predictions='all',                           save_feature_importances='best')my_pipe = Hyperpipe(name=pipe_name,  # the name of your pipeline                    optimizer='grid_search',  # which optimizer PHOTON shall use                    metrics=['mean_absolute_error', 'mean_squared_error', 'pearson_correlation', 'r2'],  # the performance metrics of interest                    best_config_metric='mean_absolute_error',  # after hyperparameter search, this metric determined the winner config                    #outer_cv=KFold(n_splits=5, shuffle=True, random_state=42),                    eval_final_performance=False,                    inner_cv=KFold(n_splits=10, shuffle=True, random_state=42),  # test each configuration k times respectively                    output_settings=pers_opts,                    verbosity=1)# ADD ELEMENTS TO YOUR PIPELINEmy_pipe += PipelineElement('SimpleImputer', missing_values=np.nan, strategy='median') #, axis=0)my_pipe += PipelineElement('StandardScaler')# in the real thing, I of course tested many more hyperparameters, but this is what came out in the end# my_pipe += PipelineElement('SVR', {'C': [10]}, kernel='rbf')my_pipe += PipelineElement('LinearSVR', {'C': [10]}, max_iter=100000)# NOW TRAIN YOUR PIPELINEmy_pipe.fit(X, y)# save the best modelmy_pipe.save_optimum_pipe(file=best_model_file)# write elements to csvmetric_dict = {'fold_nr': []}for index, inner_fold in enumerate(my_pipe.result_tree.outer_folds[0].tested_config_list[0].inner_folds):    validation_results = inner_fold.validation    metric_dict['fold_nr'].append(index+1)    for key, value in validation_results.metrics.items():        if key not in metric_dict:            metric_dict[key] = []        metric_dict[key].append(value)    predictions = {'y_true': validation_results.y_true, 'y_pred': validation_results.y_pred}    predictions_df = pd.DataFrame(data=predictions)    predictions_df.to_csv('enigma-brain-age-predictions-inner-fold' + str(index+1) + '.csv')metrics_df = pd.DataFrame(data=metric_dict)metrics_df.to_csv('enigma-brain-age-metrics.csv')