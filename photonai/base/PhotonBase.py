import glob
import importlib.util
import inspect
import os
import traceback
import re
import zipfile
import importlib
import __main__
import shutil
import datetime
from collections import OrderedDict
from copy import deepcopy
from bson.objectid import ObjectId

from sklearn.base import BaseEstimator
from sklearn.externals import joblib
from sklearn.metrics import accuracy_score
from sklearn.dummy import DummyClassifier, DummyRegressor
from sklearn.model_selection._search import ParameterGrid
from sklearn.model_selection._split import BaseCrossValidator

from .PhotonFolds import OuterFoldManager, FoldInfo
from .Helper import PHOTONPrintHelper, PHOTONDataHelper
from ..optimization.ConfigGrid import create_global_config_dict, create_global_config_grid
from ..configuration.Register import PhotonRegister
from ..optimization.OptimizationStrategies import GridSearchOptimizer, RandomGridSearchOptimizer, \
    TimeBoxedRandomGridSearchOptimizer
from ..optimization.SkOpt import SkOptOptimizer
from ..validation.ResultsDatabase import *
from ..validation.Validate import Scorer
from .PhotonPipeline import PhotonPipeline, CacheManager


class PhotonNative:
    """only for checking if code is meeting requirements"""
    pass


class OutputSettings:
    """
    Configuration class that specifies the format in which the results are saved. Results can be saved to a MongoDB
    or a simple son-file. You can also choose whether to save predictions and/or feature importances.

    Parameters
    ----------
    * `mongodb_connect_url` [str]:
        Valid mongodb connection url that specifies a database for storing the results

    * `save_predictions` [str, default='best']:
        Possible options are 'best' to save only the predictions of the best configuration for every outer fold, 'all'
        to save all predictions or 'None' to not save any predictions at all.

    * `save_feature_importances` [str, default='best']:
        Possible options are 'best' to save only the feature importances of the best configuration for every outer fold,
        'all' to save all feature importances or 'None' to not save any at all. Feature importances can only be saved
        if the chosen estimators have an attribute 'coef_' or 'feature_importances_'.

    * `project_folder` [bool, default=True]:
        If True, PHOTON writes a summary_file, the results of the hyperparameter optimization, the best model and the
        console output to the filesystem into the given project folder.

    * `project_folder` [str, default='']:
        The output folder in which all files generated by the PHOTON project are saved to.

    * `user_id` [str]:
       The user name of the according PHOTON Wizard login

    * `wizard_object_id` [str]:
       The object id to map the designed pipeline in the PHOTON Wizard to the results in the PHOTON CORE Database

    * `wizard_project_name` [str]:
       How the project is titled in the PHOTON Wizard
    """
    def __init__(self, mongodb_connect_url: str = None,
                 save_predictions: str = 'best',
                 save_feature_importances: str = 'best',
                 save_output: bool = True,
                 plots: bool = True,
                 overwrite_results: bool = False,
                 project_folder = '',
                 user_id: str = '',
                 wizard_object_id: str = '',
                 wizard_project_name: str = ''):

        self.mongodb_connect_url = mongodb_connect_url
        self.overwrite_results = overwrite_results

        self.save_best_config_predictions, self.save_predictions = self._set_save_options(save_predictions)
        self.save_best_config_feature_importances, self.save_feature_importances = self._set_save_options(save_feature_importances)

        self.__main_file__ = __main__.__file__
        if project_folder == '':
            self.project_folder = os.path.dirname(self.__main_file__)
        else:
            self.project_folder = project_folder

        self.results_folder = None
        self.save_output = save_output

        if self.save_output:
            local_file = 'photon_result_file.p'
            log_filename = 'photon_output.log'
            summary_filename = 'photon_summary.txt'
            pretrained_model_filename = 'photon_best_model.photon'
            predictions_filename = 'outer_fold_predictions.csv'
            self.local_file = os.path.join(project_folder, local_file)
            self.log_file = os.path.join(project_folder, log_filename)
            self.summary_filename = os.path.join(project_folder, summary_filename)
            self.pretrained_model_filename = os.path.join(project_folder, pretrained_model_filename)
            self.predictions_filename = os.path.join(project_folder, predictions_filename)
            self.plots = plots
        else:
            self.local_file = ''
            self.log_file = ''
            self.summary_filename = ''
            self.pretrained_model_filename = ''
            self.predictions_filename = ''

        self.user_id = user_id
        self.wizard_object_id = wizard_object_id
        self.wizard_project_name = wizard_project_name

    def _set_save_options(self, specifier):
        if specifier == 'best':
            save_best = True
            save_all = False
        elif specifier == 'all':
            save_best = True
            save_all = True
        elif specifier == 'None':
            save_best = False
            save_all = False
        else:
            raise ValueError('Possible options for saving predictions or feature importances are: "best", "all", "None"')
        return save_best, save_all

    def _update_settings(self, name, timestamp):
        if self.save_output:
            # Todo: give rights to user if this is done by docker container
            if self.overwrite_results:
                self.results_folder = os.path.join(self.project_folder, name + '_results')
            else:
                self.results_folder = os.path.join(self.project_folder, name + '_results_' + timestamp)
            self.summary_filename = self._add_timestamp(self.summary_filename)
            self.pretrained_model_filename = self._add_timestamp(self.pretrained_model_filename)
            self.predictions_filename = self._add_timestamp(self.predictions_filename)
            if not os.path.exists(self.results_folder):
                os.mkdir(self.results_folder)
            shutil.copy(self.__main_file__, os.path.join(self.results_folder, 'photon_code.py'))
            self.local_file = self._add_timestamp(self.local_file)
            self.log_file = self._add_timestamp(self.log_file)
            Logger().set_custom_log_file(self.log_file)


    def _add_timestamp(self, file):
        return os.path.join(self.results_folder, os.path.basename(file))


class Hyperpipe(BaseEstimator):
    """
    Wrapper class for machine learning pipeline, holding all pipeline elements
    and managing the optimization of the hyperparameters

    Parameters
    ----------
    * `name` [str]:
        Name of hyperpipe instance

    * `inner_cv` [BaseCrossValidator]:
        Cross validation strategy to test hyperparameter configurations, generates the validation set

    * `outer_cv` [BaseCrossValidator]:
        Cross validation strategy to use for the hyperparameter search itself, generates the test set

    * `optimizer` [str or object, default="grid_search"]:
        Hyperparameter optimization algorithm

        - In case a string literal is given:
            - "grid_search": optimizer that iteratively tests all possible hyperparameter combinations
            - "random_grid_search": a variation of the grid search optimization that randomly picks hyperparameter
               combinations from all possible hyperparameter combinations
            - "timeboxed_random_grid_search": randomly chooses hyperparameter combinations from the set of all
               possible hyperparameter combinations and tests until the given time limit is reached
               - `limit_in_minutes`: int

        - In case an object is given:
          expects the object to have the following methods:
           - `next_config_generator`: returns a hyperparameter configuration in form of an dictionary containing
              key->value pairs in the sklearn parameter encoding `model_name__parameter_name: parameter_value`
           - `prepare`: takes a list of pipeline elements and their particular hyperparameters to test
           - `evaluate_recent_performance`: gets a tested config and the respective performance in order to
              calculate a smart next configuration to process

    * `metrics` [list of metric names as str]:
        Metrics that should be calculated for both training, validation and test set
        Use the preimported metrics from sklearn and photonai, or register your own

        - Metrics for `classification`:
            - `accuracy`: sklearn.metrics.accuracy_score
            - `matthews_corrcoef`: sklearn.metrics.matthews_corrcoef
            - `confusion_matrix`: sklearn.metrics.confusion_matrix,
            - `f1_score`: sklearn.metrics.f1_score
            - `hamming_loss`: sklearn.metrics.hamming_loss
            - `log_loss`: sklearn.metrics.log_loss
            - `precision`: sklearn.metrics.precision_score
            - `recall`: sklearn.metrics.recall_score
        - Metrics for `regression`:
            - `mean_squared_error`: sklearn.metrics.mean_squared_error
            - `mean_absolute_error`: sklearn.metrics.mean_absolute_error
            - `explained_variance`: sklearn.metrics.explained_variance_score
            - `r2`: sklearn.metrics.r2_score
        - Other metrics
            - `pearson_correlation`: photon_core.framework.Metrics.pearson_correlation
            - `variance_explained`:  photon_core.framework.Metrics.variance_explained_score
            - `categorical_accuracy`: photon_core.framework.Metrics.categorical_accuracy_score

    * `best_config_metric` [str]:
        The metric that should be maximized or minimized in order to choose the best hyperparameter configuration

    * `eval_final_performance` [bool, default=True]:
        If the metrics should be calculated for the test set, otherwise the test set is seperated but not used

    * `test_size` [float, default=0.2]:
        the amount of the data that should be left out if no outer_cv is given and
        eval_final_perfomance is set to True

    * `set_random_seed` [bool, default=False]:
        If True sets the random seed to 42

    * `verbosity` [int, default=0]:
        The level of verbosity, 0 is least talkative and gives only warn and error, 1 gives adds info and 2 adds debug

    * `groups` [array-like, default=None]:
        Info for advanced cross validation strategies, such as LeaveOneSiteOut-CV about the affiliation
        of the rows in the data. Also works with continuous values and StratifiedKFoldRegression. In case a group
        variable and a StratifiedCV is passed, the targets will be ignored and only the group variable will be used
        for the stratification.

    Attributes
    ----------
    * `optimum_pipe` [Pipeline]:
        An sklearn pipeline object that is fitted to the training data according to the best hyperparameter
        configuration found. Currently, we don't create an ensemble of all best hyperparameter configs over all folds.
        We find the best config by comparing the test error across outer folds. The hyperparameter config of the best
        fold is used as the optimal model and is then trained on the complete set.

    * `best_config` [dict]:
        Dictionary containing the hyperparameters of the best configuration.
        Contains the parameters in the sklearn interface of model_name__parameter_name: parameter value

    * `result_tree` [MDBHyperpipe]:
        Object containing all information about the for the performed hyperparameter search.
        Holds the training and test metrics for all outer folds, inner folds and configurations, as well as
        additional information.

    * `pipeline_elements` [list]:
        Contains all PipelineElement or Hyperpipe objects that are added to the pipeline.

    Example
    -------
        manager = Hyperpipe('test_manager',
                            optimizer='timeboxed_random_grid_search', optimizer_params={'limit_in_minutes': 1},
                            outer_cv=ShuffleSplit(test_size=0.2, n_splits=1),
                            inner_cv=KFold(n_splits=10, shuffle=True),
                            metrics=['accuracy', 'precision', 'recall', "f1_score"],
                            best_config_metric='accuracy', eval_final_performance=True,
                            verbose=2)

   """
    def __init__(self, name, inner_cv: BaseCrossValidator, outer_cv=None,
                 optimizer='grid_search', optimizer_params: dict = {}, metrics=None,
                 best_config_metric=None, eval_final_performance=True, test_size: float = 0.2,
                 calculate_metrics_per_fold: bool = True, calculate_metrics_across_folds: bool = False,
                 set_random_seed: bool=False,
                 verbosity=0,
                 output_settings=None,
                 performance_constraints=None,
                 permutation_id: str=None,
                 cache_folder: str=None):

        self.name = re.sub(r'\W+', '', name)
        self.permutation_id = permutation_id
        if cache_folder:
            self.cache_folder = os.path.join(cache_folder, self.name)
        else:
            self.cache_folder = cache_folder
        # ====================== Cross Validation ===========================
        self.cross_validation = Hyperpipe.CrossValidation(inner_cv=inner_cv,
                                                          outer_cv=outer_cv,
                                                          eval_final_performance=eval_final_performance,
                                                          test_size=test_size,
                                                          calculate_metrics_per_fold=calculate_metrics_per_fold,
                                                          calculate_metrics_across_folds=calculate_metrics_across_folds)

        # ====================== Data ===========================
        self.data = Hyperpipe.Data()

        # ====================== Result Logging ===========================
        if output_settings:
            self.output_settings = output_settings
        else:
            self.output_settings = OutputSettings()
        self.verbosity = verbosity
        self.mongodb_writer = MongoDBWriter(self.output_settings)
        self.result_tree = None
        self.best_config = None
        self.estimation_type = None

        # ====================== Pipeline ===========================
        self.pipeline_elements = []
        self._pipe = None
        self.optimum_pipe = None
        self.preprocessing_pipe = None

        # ====================== Perfomance Optimization ===========================

        self.optimization = Hyperpipe.Optimization(metrics=metrics,
                                                   best_config_metric=best_config_metric,
                                                   optimizer_input=optimizer,
                                                   optimizer_params=optimizer_params,
                                                   performance_constraints=performance_constraints)

        self.optimization.sanity_check_metrics()

        # ====================== Internals ===========================
        self.is_final_fit = False

        if set_random_seed:
            import random
            random.seed(42)
            print('set random seed to 42')

    # Helper Classes
    #
    #
    #
    # ============= Cross Validation ==================================================================
    class CrossValidation:

        def __init__(self, inner_cv, outer_cv,
                     eval_final_performance, test_size,
                     calculate_metrics_per_fold,
                     calculate_metrics_across_folds):
            self.inner_cv = inner_cv
            self.outer_cv = outer_cv
            self.eval_final_performance = eval_final_performance
            self.test_size = test_size
            self.calculate_metrics_per_fold = calculate_metrics_per_fold
            # Todo: if self.outer_cv is LeaveOneOut: Set calculate metrics across folds to True -> Print
            self.calculate_metrics_across_folds = calculate_metrics_across_folds

            self.outer_folds = None
            self.inner_folds = dict()


    # ============= Data ==================================================================
    class Data:

        def __init__(self, X=None, y=None, kwargs=None, groups=None):
            self.X = X
            self.y = y
            self.kwargs = kwargs
            self.groups = groups

    # ============= Performance Optimization ==================================================================
    class Optimization:

        OPTIMIZER_DICTIONARY = {'grid_search': GridSearchOptimizer,
                                'random_grid_search': RandomGridSearchOptimizer,
                                'timeboxed_random_grid_search': TimeBoxedRandomGridSearchOptimizer,
                                'sk_opt': SkOptOptimizer}  # ,

        # 'fabolas': FabolasOptimizer}

        def __init__(self, optimizer_input, optimizer_params,
                     metrics, best_config_metric, performance_constraints):

            self.optimizer_input = optimizer_input
            self.optimizer_params = optimizer_params
            self.metrics = metrics
            self.best_config_metric = best_config_metric
            self.maximize_metric = True
            self.inner_cv_callback_functions = performance_constraints

        def sanity_check_metrics(self):

            # --------------------- Validity of metrics ----------------
            if isinstance(self.best_config_metric, list) or not isinstance(self.best_config_metric, str):

                if self.metrics is not None:
                    warning_text = "Best Config Metric must be a single metric given as string, no list. " \
                                   "PHOTON chose the first one from the list of metrics to calculate."

                    self.best_config_metric = self.metrics[0]
                    Logger().warn(warning_text)
                    raise Warning(warning_text)
                else:
                    error_msg = "No metrics were chosen. Please choose metrics to quantify your performance and set " \
                                "the best_config_metric so that PHOTON which optimizes for"
                    Logger().error(error_msg)
                    raise ValueError(error_msg)

            if self.best_config_metric is not None:
                if self.metrics is None:
                    self.metrics = [self.best_config_metric]
                else:
                    if self.best_config_metric not in self.metrics:
                        self.metrics.append(self.best_config_metric)

            if self.best_config_metric is None and len(self.metrics) > 0:
                self.best_config_metric = self.metrics[0]
                warning_text = "No best config metric was given, so PHOTON chose the first in the list of metrics as " \
                               "criteria for choosing the best configuration."
                Logger().warn(warning_text)
                raise Warning(warning_text)
            else:
                if self.metrics is None or len(self.metrics) == 0:
                    metric_error_text = "List of Metrics to calculate should not be empty"
                    Logger().error(metric_error_text)
                    raise ValueError(metric_error_text)

        def get_optimizer(self):
            if isinstance(self.optimizer_input, str):
                # instantiate optimizer from string
                #  Todo: check if optimizer strategy is already implemented
                optimizer_class = self.OPTIMIZER_DICTIONARY[self.optimizer_input]
                optimizer_instance = optimizer_class(**self.optimizer_params)
                return optimizer_instance
            else:
                # Todo: check if object has the right interface
                return self.optimizer_input

        def get_optimum_config(self, tested_configs):
            """
            Looks for the best configuration according to the metric with which the configurations are compared -> best config metric
            :param tested_configs: the list of tested configurations and their performances
            :return: MDBConfiguration that has performed best
            """

            list_of_config_vals = []
            list_of_non_failed_configs = [conf for conf in tested_configs if not conf.config_failed]

            if len(list_of_non_failed_configs) == 0:
                raise Warning("No Configs found which did not fail.")
            try:
                for config in list_of_non_failed_configs:
                    list_of_config_vals.append(
                        MDBHelper.get_metric(config, FoldOperations.MEAN, self.best_config_metric, train=False))

                if self.maximize_metric:
                    # max metric
                    best_config_metric_nr = np.argmax(list_of_config_vals)
                else:
                    # min metric
                    best_config_metric_nr = np.argmin(list_of_config_vals)
                return list_of_non_failed_configs[best_config_metric_nr]
            except BaseException as e:
                Logger().error(str(e))

        def get_optimum_config_outer_folds(self, outer_folds):

            list_of_scores = list()
            for outer_fold in outer_folds:
                metrics = outer_fold.best_config.inner_folds[0].validation.metrics
                list_of_scores.append(metrics[self.best_config_metric])

            if self.maximize_metric:
                # max metric
                best_config_metric_nr = np.argmax(list_of_scores)
            else:
                # min metric
                best_config_metric_nr = np.argmin(list_of_scores)

            best_config = outer_folds[best_config_metric_nr].best_config
            best_config_mdb = MDBConfig()
            best_config_mdb.config_dict = best_config.config_dict
            best_config_mdb.children_config_ref = best_config.children_config_ref
            best_config_mdb.children_config_dict = best_config.children_config_dict
            best_config_mdb.human_readable_config = best_config.human_readable_config
            return best_config_mdb


        def define_optimizer_metric(self, pipeline_elements):
            """
            Analyse and prepare the best config metric.
            Derive if it is better when the value increases or decreases.
            :param pipeline_elements: the items of the pipeline
            """
            if isinstance(self.best_config_metric, str):
                self.maximize_metric = self.greater_is_better_distinction(self.best_config_metric)

        @staticmethod
        def greater_is_better_distinction(metric):
            if metric in Scorer.ELEMENT_DICTIONARY:
                # for now do a simple hack and set greater_is_better
                # by looking at error/score in metric name
                metric_name = Scorer.ELEMENT_DICTIONARY[metric][1]
                specifier = Scorer.ELEMENT_DICTIONARY[metric][2]
                if specifier == 'score':
                    return True
                elif specifier == 'error':
                    return False
                else:
                    # Todo: better error checking?
                    error_msg = "Metric not suitable for optimizer."
                    Logger().error(error_msg)
                    raise NameError(error_msg)
            else:
                Logger().error('Specify valid metric to choose best config.')
                raise NameError('Specify valid metric to choose best config.')

    # Setters
    #
    #
    def _set_verbosity(self, verbosity):
        """
        Set verbosity level manually
        Returns None

        Parameters
        ----------
        * `verbosity` [Integer]:
            Verbosity level can be 0, 1, or 2.

        """
        Logger().set_verbosity(verbosity)

    def _set_persist_options(self, persist_options):
        """
        Set persist options manually
        Returns None

        Parameters
        ----------
        * `persist_options` [OutputSettings]:

        """
        self.output_settings = persist_options

    # Pipeline Management & Interface
    #
    #
    def __iadd__(self, pipe_element):
        """
        Add an element to the machine learning pipeline
        Returns self

        Parameters
        ----------
        * 'pipe_element' [PipelineElement]:
            The object to add to the machine learning pipeline, being either a transformer or an estimator.

        """
        if isinstance(pipe_element, PreprocessingPipe):
            self.preprocessing_pipe = pipe_element
        elif isinstance(pipe_element, CallbackElement):
            pipe_element.needs_y = True
            self.pipeline_elements.append(pipe_element)
        else:
            if isinstance(pipe_element, PipelineElement) or issubclass(type(pipe_element), PhotonNative):
                self.pipeline_elements.append(pipe_element)
                # Todo: is repeated each time element is added....
                self._prepare_pipeline()
            else:
                raise TypeError("Element must be of type Pipeline Element")
        return self

    def add(self, pipe_element):
        """
           Add an element to the machine learning pipeline
           Returns self

           Parameters
           ----------
           * `pipe_element` [PipelineElement or Hyperpipe]:
               The object to add to the machine learning pipeline, being either a transformer or an estimator.

           """
        self.__iadd__(pipe_element)

    def _prepare_dummy_estimator(self):
        Logger().info("Running Dummy Estimator.")
        est_type = self.estimation_type

        # Run Dummy Estimator
        self.result_tree.dummy_estimator = DummyResults()

        if est_type == 'regressor':
            self.result_tree.dummy_estimator.strategy = 'mean'
            return DummyRegressor(strategy=self.result_tree.dummy_estimator.strategy)
        elif est_type == 'classifier':
            self.result_tree.dummy_estimator.strategy = 'most_frequent'
            return DummyClassifier(strategy=self.result_tree.dummy_estimator.strategy)
        else:
            Logger().info('Estimator does not specify whether it is a regressor or classifier. DummyEstimator '
                          'step skipped.')
            return

    def _evaluate_dummy_estimator(self, fold_list):
        config_item = MDBConfig()
        config_item.inner_folds = [f for f in fold_list if f is not None]
        if len(config_item.inner_folds) > 0:
            self.result_tree.dummy_estimator.train, self.result_tree.dummy_estimator.test = MDBHelper.aggregate_metrics(config_item,
                                                                                            self.optimization.metrics)

    def _prepare_result_logging(self, start_time):
        result_tree_name = self.name

        self.result_tree = MDBHyperpipe(name=result_tree_name)

        self.result_tree.computation_start_time = start_time
        self.result_tree.metrics = self.optimization.metrics
        self.result_tree.estimation_type = self.estimation_type
        if self.permutation_id is not None:
            self.result_tree.permutation_id = self.permutation_id

        # save wizard information to photon db in order to map results to the wizard design object
        if self.output_settings and hasattr(self.output_settings, 'wizard_object_id'):
            if self.output_settings.wizard_object_id:
                self.name = self.output_settings.wizard_object_id
                self.result_tree.name = self.output_settings.wizard_object_id
                self.result_tree.wizard_object_id = ObjectId(self.output_settings.wizard_object_id)
                self.result_tree.wizard_system_name = self.output_settings.wizard_project_name
                self.result_tree.user_id = self.output_settings.user_id
        self.result_tree.outer_folds = []
        self.result_tree.eval_final_performance = self.cross_validation.eval_final_performance
        self.result_tree.best_config_metric = self.optimization.best_config_metric

    def _finalize_optimization(self):
        # ==================== EVALUATING RESULTS OF HYPERPARAMETER OPTIMIZATION ===============================
        # 1. computing average metrics
        # 2. finding overall best config
        # 3. training model with best config
        # 4. persisting best model

        # Compute all final metrics
        self.result_tree.metrics_train, self.result_tree.metrics_test = MDBHelper.aggregate_metrics(
            self.result_tree.outer_folds,
            self.optimization.metrics)

        # save result tree to db or file or both
        self.mongodb_writer.save(self.result_tree)
        Logger().info("Saved result tree.")

        # Find best config across outer folds
        self.best_config = self.optimization.get_optimum_config_outer_folds(self.result_tree.outer_folds)
        self.result_tree.best_config = self.best_config
        Logger().info('OVERALL BEST CONFIGURATION')
        Logger().info('--------------------------')
        Logger().info(PHOTONPrintHelper._optimize_printing(self.optimum_pipe, self.best_config.config_dict))

        # save results again
        self.result_tree.time_of_results = datetime.datetime.now()
        self.result_tree.computation_completed = True
        self.mongodb_writer.save(self.result_tree)
        Logger().info("Saved overall best config to database ")

        # set self to best config
        self.optimum_pipe = self._pipe
        self.optimum_pipe.set_params(**self.best_config.config_dict)
        self.recursive_cash_folder_propagation(self.optimum_pipe, self.cache_folder, "fixed_fold_id")
        self.optimum_pipe.caching = False
        Logger().info("Fitting best model...")
        self.optimum_pipe.fit(self.data.X, self.data.y, **self.data.kwargs)

        Logger().info("Saving best model..")
        if self.output_settings.pretrained_model_filename != '':
            try:
                PhotonModelPersistor.save_optimum_pipe(self, self.output_settings.pretrained_model_filename)
                Logger().info("Saved optimum pipe model to file")
            except FileNotFoundError as e:
                Logger().info("Could not save optimum pipe model to file")
                Logger().error(str(e))


    def _input_data_sanity_checks(self, data, targets, **kwargs):
        # ==================== SANITY CHECKS ===============================
        # 1. Make to numpy arrays
        # 2. erase all Nan targets

        self.data.X = data
        self.data.y = targets
        self.data.kwargs = kwargs

        try:
            if self.data.X is None:
                raise ValueError("(Input-)data is a NoneType.")
            if self.data.y is None:
                raise ValueError("(Input-)target is a NoneType.")

            shape_X = np.shape(self.data.X)
            shape_y = np.shape(self.data.y)
            if len(shape_y) != 1:
                raise ValueError("Target is not one-dimensional.")
            if not shape_X[0] == shape_y[0]:
                raise IndexError(
                    "Size of targets mismatch to the size of the data: " + str(shape_X[0]) + " - " + str(shape_y[0]))
        except IndexError as ie:
            Logger().error("IndexError: " + str(ie))
            raise ie
        except ValueError as ve:
            Logger().error("ValueError: " + str(ve))
            raise ve
        except Exception as e:
            Logger().error("Error: " + str(e))
            raise e

        # be compatible to list of (image-) files
        if isinstance(self.data.X, list):
            self.data.X = np.asarray(self.data.X)
        elif isinstance(self.data.X, pd.DataFrame):
            self.data.X = self.data.X.to_numpy()
        if isinstance(self.data.y, list):
            self.data.y = np.asarray(self.data.y)
        elif isinstance(self.data.y, pd.Series) or isinstance(self.data.y, pd.DataFrame):
            self.data.y = self.data.y.to_numpy()

        # at first first, erase all rows where y is Nan if preprocessing has not done it already
        try:
            nans_in_y = np.isnan(self.data.y)
            nr_of_nans = len(np.where(nans_in_y == 1)[0])
            if nr_of_nans > 0:
                Logger().info("You have " + str(nr_of_nans) + " Nans in your target vector, "
                                                              "PHOTON erases every data item that has a Nan Target")
                self.data.X = self.data.X[~nans_in_y]
                self.data.y = self.data.y[~nans_in_y]
        except Exception as e:
            # This is only for convenience so if it fails then never mind
            Logger().error("Removing Nans in target vector failed: " + str(e))
            pass

        Logger().info("Hyperpipe is training with " + str(self.data.y.shape[0]) + " data items.")

    @staticmethod
    def prepare_caching(cache_folder):
        if not os.path.isdir(cache_folder):
            os.mkdir(cache_folder)

    @staticmethod
    def recursive_cash_folder_propagation(new_pipe, cache_folder, inner_fold_id):
        new_pipe.cache_folder = cache_folder
        new_pipe.fold_id = inner_fold_id
        new_pipe.caching = True

        for step_name, step_obj in new_pipe.steps:
            if isinstance(step_obj, PipelineBranch):
                sub_cache = os.path.join(cache_folder, step_name)
                # Hyperpipe.prepare_caching(sub_cache)
                Hyperpipe.recursive_cash_folder_propagation(step_obj.base_element, sub_cache, inner_fold_id)
                Hyperpipe.prepare_caching(step_obj.base_element.cache_folder)
            elif isinstance(step_obj, PipelineStacking):
                for child in step_obj.pipe_elements:
                    if isinstance(child, PipelineBranch):
                        sub_cache = os.path.join(os.path.join(cache_folder, step_obj.name), child.name)
                        # Hyperpipe.prepare_caching(sub_cache)
                        Hyperpipe.recursive_cash_folder_propagation(child.base_element, sub_cache, inner_fold_id)
                        Hyperpipe.prepare_caching(child.base_element.cache_folder)

    def preprocess_data(self):
        # if there is a preprocessing pipeline, we apply it first.
        if self.preprocessing_pipe is not None:
            Logger().info("Applying preprocessing.")
            self.preprocessing_pipe.fit(self.data.X, self.data.y, **self.data.kwargs)
            self.data.X, self.data.y, self.data.kwargs = self.preprocessing_pipe.transform(self.data.X, self.data.y,
                                                                                           **self.data.kwargs)

    def _check_for_estimator(self):
        last_element = self.pipeline_elements[-1]
        if isinstance(last_element, PipelineSwitch):
            # if PipelineSwitch, just take the first element within the switch; this should be a regressor or classifier
            last_element = last_element.pipeline_element_list[0]
        elif isinstance(last_element, PipelineStacking):
            # if PipelineStacking, just take random element from stack
            last_element = last_element.pipe_elements.popitem()
        elif isinstance(last_element, PipelineBranch):
            # if PipelineBranch, just take last element of branch
            last_element = last_element.pipeline_elements[-1]

        if not hasattr(last_element.base_element, '_estimator_type'):
            raise NotImplementedError("Last pipeline element has to be an estimator. Your estimator does not specify"
                                      " whether it is a regressor or classifier. Make sure to inherit from sklearn's "
                                      "ClassifierMixin or RegressorMixin or set _estimator_type explicitly.")
        estimator_type = last_element.base_element._estimator_type
        last_name = last_element.name
        self.estimation_type = estimator_type
        if not (estimator_type == 'classifier' or estimator_type == 'regressor'):
            raise NotImplementedError("Last pipeline element has to be an estimator. {} is a {}.".format(last_name,
                                                                                                        estimator_type))

    def fit(self, data, targets, **kwargs):
        """
        Starts the hyperparameter search and/or fits the pipeline to the data and targets

        Manages the nested cross validated hyperparameter search:

        1. Filters the data according to filter strategy (1) and according to the imbalanced_data_strategy (2)
        2. requests new configurations from the hyperparameter search strategy, the optimizer,
        3. initializes the testing of a specific configuration,
        4. communicates the result to the optimizer,
        5. repeats 2-4 until optimizer delivers no more configurations to test
        6. finally searches for the best config in all tested configs,
        7. trains the pipeline with the best config and evaluates the performance on the test set

        Parameters
        ----------
         * `data` [array-like, shape=[N, D]]:
            the training and test data, where N is the number of samples and D is the number of features.

         * `targets` [array-like, shape=[N]]:
            the truth values, where N is the number of samples.


        Returns
        -------
         * 'self'
            Returns self

        """
        try:

            self._input_data_sanity_checks(data, targets, **kwargs)
            self._check_for_estimator()
            self.preprocess_data()
            Logger().set_verbosity(self.verbosity)

            if not self.is_final_fit:

                # first check if correct optimizer metric has been chosen
                # pass pipeline_elements so that OptimizerMetric can look for last
                # element and use the corresponding score method
                self.optimization.define_optimizer_metric(self.pipeline_elements)

                start = datetime.datetime.now()
                self._prepare_result_logging(start)

                # update output options to add pipe name and timestamp to results folder
                self.output_settings._update_settings(self.name, start.strftime("%Y-%m-%d_%H-%M-%S"))
                self.mongodb_writer = MongoDBWriter(self.output_settings)

                # Outer Folds
                outer_folds = FoldInfo.generate_folds(self.cross_validation.outer_cv,
                                                      self.data.X, self.data.y, self.data.groups,
                                                      self.cross_validation.eval_final_performance,
                                                      self.cross_validation.test_size)

                self.cross_validation.outer_folds = {f.fold_id: f for f in outer_folds}

                # Run Dummy Estimator
                dummy_estimator = self._prepare_dummy_estimator()
                dummy_results = []

                if self.cache_folder is not None:
                    Logger().info("Removing Cache Files")
                    CacheManager.clear_cache_files(self.cache_folder, force_all=True)


                # loop over outer cross validation
                for i, outer_f in enumerate(outer_folds):
                    Logger().info('HYPERPARAMETER SEARCH OF {0}, Outer Cross validation Fold {1}'
                                  .format(self.name, outer_f.fold_nr))

                    # 1. generate OuterFolds Object

                    outer_fold_computator = OuterFoldManager(self._copy_pipeline,
                                                             self.optimization,
                                                             outer_f.fold_id,
                                                             self.cross_validation,
                                                             save_feature_importances=self.output_settings.save_feature_importances,
                                                             save_predictions=self.output_settings.save_predictions,
                                                             save_best_config_feature_importances=self.output_settings.save_best_config_feature_importances,
                                                             save_best_config_predictions=self.output_settings.save_best_config_predictions,
                                                             cache_folder=self.cache_folder,
                                                             cache_updater=self.recursive_cash_folder_propagation)
                    # 2. prepare
                    outer_fold = MDBOuterFold(fold_nr=outer_f.fold_nr)
                    self.result_tree.outer_folds.append(outer_fold)
                    outer_fold_computator.prepare_optimization(self.pipeline_elements, outer_fold)
                    dummy_results.append(outer_fold_computator.fit_dummy(self.data.X, self.data.y, dummy_estimator))

                    # 3. fit
                    outer_fold_computator.fit(self.data.X, self.data.y, **self.data.kwargs)

                    # 4. save outer fold results
                    self.mongodb_writer.save(self.result_tree)

                    # 5. clear cache
                    CacheManager.clear_cache_files(self.cache_folder)

                # evaluate hyperparameter optimization results for best config
                self._evaluate_dummy_estimator(dummy_results)
                self._finalize_optimization()

                # clear complete cache ?
                CacheManager.clear_cache_files(self.cache_folder, force_all=True)

                try:
                    from ..validation.ResultsTreeHandler import ResultsTreeHandler
                    ResultsTreeHandler().write_summary(self.result_tree,
                                                       self.output_settings.results_folder+"/")
                except OSError as e:
                    Logger().error("Could not write time-monitor png/csv file")
                    Logger().error(str(e))

            ###############################################################################################
            else:
                self.preprocess_data()
                self._pipe.fit(self.data.X, self.data.y, **kwargs)

        except Exception as e:
            Logger().error(e)
            Logger().error(traceback.format_exc())
            traceback.print_exc()
            raise e
        return self

    def predict(self, data, **kwargs):
        """
        Use the optimum pipe to predict the data

        Returns
        -------
            predicted targets

        """
        # Todo: if local_search = true then use optimized pipe here?
        if self._pipe:
            return self.optimum_pipe.predict(data, **kwargs)

    def predict_proba(self, data, **kwargs):
        """
        Predict probabilities

        Returns
        -------
        predicted probabilities

        """
        if self._pipe:
            return self.optimum_pipe.predict_proba(data, **kwargs)

    def transform(self, data, **kwargs):
        """
        Use the optimum pipe to transform the data
        """
        if self._pipe:
            X, _, _ = self.optimum_pipe.transform(data, y=None, **kwargs)
            return X

    def get_params(self, deep=True):
        """
        Retrieve parameters from sklearn pipeline
        """
        if self._pipe is not None:
            return self._pipe.get_params(deep)
        else:
            return None

    def set_params(self, **params):
        """
        Give parameter values to the pipeline elements
        """
        if self._pipe is not None:
            self._pipe.set_params(**params)
        return self

    def _prepare_pipeline(self):
        """
        build sklearn pipeline from PipelineElements and
        calculate parameter grid for all combinations of pipeline element hyperparameters
        """
        # prepare pipeline
        pipeline_steps = []
        for item in self.pipeline_elements:
            # pipeline_steps.append((item.name, item.base_element))
            pipeline_steps.append((item.name, item))

        # build pipeline...
        self._pipe = PhotonPipeline(pipeline_steps)

    def copy_me(self):
        """
        Helper function to copy an entire Hyperpipe
        :return: Hyperpipe
        """
        # create new Hyperpipe instance
        pipe_copy = Hyperpipe(name=self.name, inner_cv=self.cross_validation.inner_cv,
                              best_config_metric=self.optimization.best_config_metric, metrics=self.optimization.metrics)

        signature = inspect.getfullargspec(self.__init__)[0]
        for attr in signature:
            if hasattr(self, attr):
                setattr(pipe_copy, attr, getattr(self, attr))

        if hasattr(self, 'preprocessing_pipe') and self.preprocessing_pipe:
            preprocessing = PreprocessingPipe()
            for element in self.preprocessing_pipe.pipeline_elements:
                preprocessing += element.copy_me()
            pipe_copy += preprocessing
        if hasattr(self, 'pipeline_elements'):
            for element in self.pipeline_elements:
                pipe_copy += element.copy_me()
        return pipe_copy

    def _copy_pipeline(self):
        """
        Copy Pipeline by building a new sklearn Pipeline with Pipeline Elements

        Returns
        -------
        new sklearn Pipeline object
        """
        pipeline_steps = []
        for item in self.pipeline_elements:
            cpy = item.copy_me()
            if isinstance(cpy, list):
                for new_step in cpy:
                    pipeline_steps.append((new_step.name, new_step))
            else:
                pipeline_steps.append((cpy.name, cpy))
        new_pipe = PhotonPipeline(pipeline_steps)
        return new_pipe

    def save_optimum_pipe(self, filename=None, password=None):
        if filename is None:
            filename = "photon_" + self.name + "_best_model.p"
        PhotonModelPersistor.save_optimum_pipe(self, filename, password)

    @staticmethod
    def load_optimum_pipe(file, password=None):
        return PhotonModelPersistor.load_optimum_pipe(file, password)

    def config_to_human_readable_dict(self, specific_config):
        return PHOTONPrintHelper.config_to_human_readable_dict(self._pipe, specific_config)

    def inverse_transform_pipeline(self, hyperparameters: dict, data, targets, data_to_inverse):
        """
        Inverse transform data for a pipeline with specific hyperparameter configuration

        1. Copy Sklearn Pipeline,
        2. Set Parameters
        3. Fit Pipeline to data and targets
        4. Inverse transform data with that pipeline

        Parameters
        ----------
        * `hyperparameters` [dict]:
            The concrete configuration settings for the pipeline elements
        * `data` [array-like]:
            The training data to which the pipeline is fitted
        * `targets` [array-like]:
            The truth values for training
        * `data_to_inverse` [array-like]:
            The data that should be inversed after training

        Returns
        -------
        Inversed data as array
        """
        copied_pipe = self._copy_pipeline()
        copied_pipe.set_params(**hyperparameters)
        copied_pipe.fit(data, targets)
        return copied_pipe.inverse_transform(data_to_inverse)


class SourceFilter(BaseEstimator):
    """
    Helper Class to split the data e.g. for stacking.
    """
    def __init__(self, indices):
        self.name = 'SourceFilter'
        self.hyperparameters = {}
        self.indices = indices
        self.needs_covariates = False
        self.needs_y = False

    def fit(self, X, y=None, **kwargs):
        return self

    def transform(self, X, y=None, **kwargs):
        """
        Returns only part of the data, column-wise filtered by self.indices
        """
        return X[:, self.indices], y, kwargs


class PipelineElement(BaseEstimator):
    """
    Photon wrapper class for any transformer or predictor element in the pipeline.

    1. Saves the hyperparameters that are to be tested and creates a grid of all hyperparameter configurations
    2. Enables fast and rapid instantiation of pipeline elements per string identifier,
         e.g 'svc' creates an sklearn.svm.SVC object.
    3. Attaches a "disable" switch to every element in the pipeline in order to test a complete disable


    Parameters
    ----------
    * `name` [str]:
       A string literal encoding the class to be instantiated
    * `hyperparameters` [dict]:
       Which values/value range should be tested for the hyperparameter.
       In form of "Hyperparameter_name: [array of parameter values to be tested]"
    * `test_disabled` [bool]:
        If the hyperparameter search should evaluate a complete disabling of the element
    * `disabled` [bool]:
        If true, the element is currently disabled and does nothing except return the data it received
    * `kwargs` [dict]:
        Any parameters that should be passed to the object to be instantiated, default parameters

    """
    # Registering Pipeline Elements
    ELEMENT_DICTIONARY = PhotonRegister.get_package_info()

    def __init__(self, name, hyperparameters: dict=None, test_disabled: bool=False,
                 disabled: bool =False, base_element=None, batch_size=0, **kwargs):
        """
        Takes a string literal and transforms it into an object of the associated class (see PhotonCore.JSON)

        Returns
        -------
        instantiated class object
        """
        if hyperparameters is None:
            hyperparameters = {}

        if base_element is None:
            if name in PipelineElement.ELEMENT_DICTIONARY:
                try:
                    desired_class_info = PipelineElement.ELEMENT_DICTIONARY[name]
                    desired_class_home = desired_class_info[0]
                    desired_class_name = desired_class_info[1]
                    imported_module = importlib.import_module(desired_class_home)
                    desired_class = getattr(imported_module, desired_class_name)
                    self.base_element = desired_class(**kwargs)
                except AttributeError as ae:
                    Logger().error('ValueError: Could not find according class:'
                                   + str(PipelineElement.ELEMENT_DICTIONARY[name]))
                    raise ValueError('Could not find according class:', PipelineElement.ELEMENT_DICTIONARY[name])
            else:
                Logger().error('Element not supported right now:' + name)
                raise NameError('Element not supported right now:', name)
        else:
            self.base_element = base_element

        self.is_transformer = hasattr(self.base_element, "transform")
        self.is_estimator = hasattr(self.base_element, "predict")

        self.kwargs = kwargs
        self.current_config = None
        self.batch_size = batch_size

        # Todo: check if hyperparameters are members of the class
        # Todo: write method that returns any hyperparameter that could be optimized --> sklearn: get_params.keys
        # Todo: map any hyperparameter to a possible default list of values to try
        self.name = name
        self.test_disabled = test_disabled
        self._sklearn_disabled = self.name + '__disabled'
        self._hyperparameters = hyperparameters

        # check if hyperparameters are members of the class
        self._check_hyper(BaseEstimator)

        # self.initalize_hyperparameters = hyperparameters
        # check if hyperparameters are already in sklearn style
        if len(hyperparameters) > 0:
            key_0 = next(iter(hyperparameters))
            if self.name not in key_0:
                self.hyperparameters = hyperparameters
        else:
            self.hyperparameters = hyperparameters
        self.disabled = disabled

        # check if self.base element needs y for fitting and transforming
        if hasattr(self.base_element, 'needs_y'):
            self.needs_y = self.base_element.needs_y
        else:
            self.needs_y = False
        # or if it maybe needs covariates for fitting and transforming
        if hasattr(self.base_element, 'needs_covariates'):
            self.needs_covariates = self.base_element.needs_covariates
        else:
            self.needs_covariates = False

    def _check_hyper(self,BaseEstimator):
        # check if hyperparameters are members of the class
        not_supp_hyper = list(
            set([key.split("__")[-1] for key in self._hyperparameters.keys() if key.split("__")[-1]!="disabled"]) - set(BaseEstimator.get_params(self.base_element).keys()))
        if not_supp_hyper:
            Logger().error(
                'ValueError: Set of hyperparameters are not valid, check hyperparameters:' + str(not_supp_hyper))
            raise ValueError(
                'ValueError: Set of hyperparameters are not valid, check hyperparameters:' + str(not_supp_hyper))

    def copy_me(self):
        # TODO !!!!!!!
        copy = PipelineElement(self.name, self.hyperparameters, **self.kwargs)
        if self.current_config is not None:
            copy.set_params(**self.current_config)
        return copy
        # if hasattr(self.base_element, 'copy_me'):
        #     # new_base_element = self.base_element.copy_me()

        #     return PipelineElement(self.name, self.hyperparameters, **self.kwargs)
        # else:
        #     return deepcopy(self)

    @classmethod
    def create(cls, name, base_element, hyperparameters: dict, test_disabled=False, disabled=False, **kwargs):
        """
        Takes an instantiated object and encapsulates it into the PHOTON structure,
        add the disabled function and attaches information about the hyperparameters that should be tested
        """
        return PipelineElement(name, hyperparameters, test_disabled, disabled, base_element=base_element, **kwargs)

    @property
    def hyperparameters(self):
        return self._hyperparameters

    @hyperparameters.setter
    def hyperparameters(self, value: dict):
        self.generate_sklearn_hyperparameters(value)

    @property
    def feature_importances_(self):
        if hasattr(self.base_element, 'feature_importances_'):
            return self.base_element.feature_importances_

    @property
    def coef_(self):
        if hasattr(self.base_element, 'coef_'):
            return self.base_element.coef_

    def generate_config_grid(self):
        config_dict = create_global_config_dict([self])
        if len(config_dict) > 0:
            if self.test_disabled:
                config_dict.pop(self._sklearn_disabled)
            config_list = list(ParameterGrid(config_dict))
            if self.test_disabled:
                for item in config_list:
                    item[self._sklearn_disabled] = False
                config_list.append({self._sklearn_disabled: True})
                if len(config_list) < 2:
                    config_list.append({self._sklearn_disabled: False})

            return config_list
        else:
            return []

    def generate_sklearn_hyperparameters(self, value: dict):
        """
        Generates a dictionary according to the sklearn convention of element_name__parameter_name: parameter_value
        """
        self._hyperparameters = {}
        for attribute, value_list in value.items():
            self._hyperparameters[self.name + '__' + attribute] = value_list
        if self.test_disabled:
            self._hyperparameters[self._sklearn_disabled] = [False, True]

    def get_params(self, deep: bool=True):
        """
        Forwards the get_params request to the wrapped base element
        """
        return self.base_element.get_params(deep)

    def set_params(self, **kwargs):
        """
        Forwards the set_params request to the wrapped base element
        Takes care of the disabled parameter which is additionally attached by the PHOTON wrapper
        """
        # this is an ugly hack to approximate the right settings when copying the element
        self.current_config = kwargs
        # element disable is a construct used for this container only
        if self._sklearn_disabled in kwargs:
            self.disabled = kwargs[self._sklearn_disabled]
            del kwargs[self._sklearn_disabled]
        elif 'disabled' in kwargs:
            self.disabled = kwargs['disabled']
            del kwargs['disabled']
        self.base_element.set_params(**kwargs)
        return self

    def fit(self, data, targets=None, **kwargs):
        """
        Calls the fit function of the base element

        Returns
        ------
        self
        """
        if not self.disabled:
            obj = self.base_element
            arg_list = inspect.signature(obj.fit)
            if len(arg_list.parameters) > 2:
                vals = arg_list.parameters.values()
                kwargs_param = list(vals)[-1]
                if kwargs_param.kind == kwargs_param.VAR_KEYWORD:
                    obj.fit(data, targets, **kwargs)
                    return self
            obj.fit(data, targets)
        return self

    def __batch_predict(self, delegate, X, **kwargs):
        if not isinstance(X, list) and not isinstance(X, np.ndarray):
            Logger().warn("Cannot do batching on a single entity.")
            return delegate(X, **kwargs)

            # initialize return values
        processed_y = None
        nr = PHOTONDataHelper.find_n(X)

        batch_idx = 0
        for start, stop in PHOTONDataHelper.chunker(nr, self.batch_size):
            batch_idx += 1
            Logger().debug(self.name + " is predicting batch nr " + str(batch_idx))

            # split data in batches
            X_batched, y_batched, kwargs_dict_batched = PHOTONDataHelper.split_data(X, None, kwargs, start, stop)

            # predict
            y_pred = delegate(X_batched, **kwargs_dict_batched)
            processed_y = PHOTONDataHelper.stack_results(y_pred, processed_y)

        return processed_y

    def __predict(self, data, **kwargs):
        if not self.disabled:
            if hasattr(self.base_element, 'predict'):
                # Todo: check if element has kwargs, and give it to them
                return self.base_element.predict(data)
            else:
                Logger().error('BaseException. base Element should have function ' +
                               'predict.')
                raise BaseException('base Element should have function predict.')
        else:
            return data

    def predict(self, X, **kwargs):
        """
        Calls predict function on the base element.
        """
        if self.batch_size == 0:
            return self.__predict(X, **kwargs)
        else:
            return self.__batch_predict(self.__predict, X, **kwargs)

    def predict_proba(self, X, **kwargs):
        if self.batch_size == 0:
            return self.__predict_proba(X, **kwargs)
        else:
            return self.__batch_predict(self.__predict_proba(X, **kwargs))

    def __predict_proba(self, data, **kwargs):
        """
        Predict probabilities
        base element needs predict_proba() function, otherwise throw
        base exception.
        """
        if not self.disabled:
            if hasattr(self.base_element, 'predict_proba'):
                return self.base_element.predict_proba(data)
            else:
                Logger().error('BaseException. base Element should have "predict_proba" function.')
                raise BaseException('base Element should have predict_proba function.')
        return data

    # def fit_predict(self, data, targets):
    #     if not self.disabled:
    #         return self.base_element.fit_predict(data, targets)
    #     else:
    #         return data

    def __transform(self, X, y=None, **kwargs):
        if not self.disabled:
            if hasattr(self.base_element, 'transform'):
                return self.adjusted_delegate_call(self.base_element.transform, X, y, **kwargs)
            elif hasattr(self.base_element, 'predict', **kwargs):
                # Logger().warn("used prediction instead of transform " + self.name)
                # raise Warning()
                return self.base_element.predict(X), y, kwargs
            else:
                Logger().error('BaseException: transform-predict-mess')
                raise BaseException('transform-predict-mess')
        else:
            return X, y, kwargs

    def transform(self, X, y=None, **kwargs):
        """
        Calls transform on the base element.

        IN CASE THERE IS NO TRANSFORM METHOD, CALLS PREDICT.
        This is used if we are using an estimator as a preprocessing step.
        """
        if self.batch_size == 0:
            return self.__transform(X, y, **kwargs)
        else:
            return self.__batch_transform(X, y, **kwargs)

    def inverse_transform(self, X, y=None, **kwargs):
        """
        Calls inverse_transform on the base element
        """
        if self.batch_size == 0:
            return self.__inverse_transform(X, y, **kwargs)
        else:
            return self.__batch_transform(X, y, **kwargs)

    def __inverse_transform(self, X, y=None, **kwargs):
        if hasattr(self.base_element, 'inverse_transform'):
            X, y, kwargs = self.adjusted_delegate_call(self.base_element.inverse_transform, X, y, **kwargs)
        return X, y, kwargs

    def __batch_transform(self, X, y=None, **kwargs):
        if not isinstance(X, list) and not isinstance(X, np.ndarray):
            Logger().warn("Cannot do batching on a single entity.")
            return self.__transform(X, y, **kwargs)

            # initialize return values
        processed_X = None
        processed_y = None
        processed_kwargs = dict()

        nr = PHOTONDataHelper.find_n(X)

        batch_idx = 0
        for start, stop in PHOTONDataHelper.chunker(nr, self.batch_size):
            batch_idx += 1
            Logger().debug(self.name + " is transforming batch nr " + str(batch_idx))

            # split data in batches
            X_batched, y_batched, kwargs_dict_batched = PHOTONDataHelper.split_data(X, y, kwargs, start, stop)

            # call transform
            X_new, y_new, kwargs_new = self.adjusted_delegate_call(self.base_element.transform, X_batched, y_batched,
                                                                   **kwargs_dict_batched)

            # stack results
            processed_X, processed_y, processed_kwargs = PHOTONDataHelper.join_data(processed_X, X_new, processed_y,
                                                                                    y_new,
                                                                                    processed_kwargs, kwargs_new)

        return processed_X, processed_y, processed_kwargs

    def adjusted_delegate_call(self, delegate, X, y, **kwargs):
        # Case| transforms X | needs_y | needs_covariates
        # -------------------------------------------------------
        #   1         yes        no           no     = transform(X) -> returns Xt
        #   2         yes        yes          no     = transform(X, y) -> returns Xt, yt
        #   3         yes        yes          yes    = transform(X, y, kwargs) -> returns Xt, yt, kwargst
        #   4         yes        no           yes    = transform(X, kwargs) -> returns Xt, kwargst
        #   5         no      yes or no      yes or no      = NOT ALLOWED

        if self.needs_y:
            # if we dont have any target vector we are in the application state,
            # so we skip all training_only steps
            if y is not None:
                if self.needs_covariates:
                    X, y, kwargs = delegate(X, y, **kwargs)
                else:
                    X, y = delegate(X, y)

        elif self.needs_covariates:
            # we need an extra arrangement here, because we reuse code
            if isinstance(self, (PipelineBranch, PipelineStacking)):
                X, _, _ = delegate(X, None, **kwargs)
            else:
                X, kwargs = delegate(X, **kwargs)
        else:
            X = delegate(X)

        return X, y, kwargs



    def score(self, X_test, y_test):
        """
        Calls the score function on the base element:
        Returns a goodness of fit measure or a likelihood of unseen data:
        """
        return self.base_element.score(X_test, y_test)

    def prettify_config_output(self, config_name: str, config_value, return_dict:bool=False):
        """Make hyperparameter combinations human readable """
        if config_name == "disabled" and config_value is False:
            if return_dict:
                return {'enabled':True}
            else:
                return "enabled = True"
        else:
            if return_dict:
                return {config_name:config_value}
            else:
                return config_name + '=' + str(config_value)


class PipelineBranch(PipelineElement):
    """
     A substream of pipeline elements that is encapsulated e.g. for parallelization

     Parameters
     ----------
        * `name` [str]:
            Name of the encapsulated item and/or summary of the encapsulated element`s functions

        """

    def __init__(self, name):

        super().__init__(name, {}, test_disabled=False, disabled=False, base_element=True)

        # in case any of the children needs y or covariates we need to request them
        self.needs_y = False
        self.needs_covariates = True
        self.pipeline_elements = []
        self.has_hyperparameters = True

        # needed for caching on individual level
        self.fix_fold_id = False
        self.do_not_delete_cache_folder = False

    def fit(self, X, y=None, **kwargs):
        return super().fit(X, y, **kwargs)

    def transform(self, X, y=None, **kwargs):
        return super().transform(X, y, **kwargs)

    def predict(self, data, **kwargs):
        return super().predict(data, **kwargs)

    def __iadd__(self, pipe_element):
        """
        Add an element to the sub pipeline
        Returns self

        Parameters
        ----------
        * `pipe_element` [PipelineElement or Hyperpipe]:
            The object to add, being either a transformer or an estimator.

        """
        if pipe_element.needs_y:
            raise ValueError("Child Element of PipelineBranch must not transform y")
        self.pipeline_elements.append(pipe_element)
        self._prepare_pipeline()
        return self

    def add(self, pipe_element):
        """
           Add an element to the sub pipeline
           Returns self
    
           Parameters
           ----------
           * `pipe_element` [PipelineElement or Hyperpipe]:
               The object to add, being either a transformer or an estimator.
    
           """
        self.__iadd__(pipe_element)

    def _prepare_pipeline(self):
        """ Generates sklearn pipeline with all underlying steps """
        pipeline_steps = []

        for item in self.pipeline_elements:
            # pipeline_steps.append((item.name, item.base_element))
            pipeline_steps.append((item.name, item))
            if hasattr(item, 'hyperparameters'):
                self._hyperparameters[item.name] = item.hyperparameters

        if self.has_hyperparameters:
            self.generate_sklearn_hyperparameters()
        new_pipe = PhotonPipeline(pipeline_steps)
        new_pipe._fix_fold_id = self.fix_fold_id
        new_pipe._do_not_delete_cache_folder = self.do_not_delete_cache_folder
        self.base_element = new_pipe

    def copy_me(self):
        new_copy_of_me = self.__class__(self.name)
        for item in self.pipeline_elements:
            if hasattr(item, 'copy_me'):
                copy_item = item.copy_me()
            else:
                copy_item = deepcopy(item)
            new_copy_of_me += copy_item
        if self.current_config is not None:
            new_copy_of_me.set_params(**self.current_config)
        return new_copy_of_me

    @property
    def hyperparameters(self):
        return self._hyperparameters

    @hyperparameters.setter
    def hyperparameters(self, value):
        """
        Setting hyperparameters does not make sense, only the items that added can be optimized, not the container (self)
        """
        return None

    def generate_config_grid(self):
        if self.has_hyperparameters:
            tmp_grid = create_global_config_grid(self.pipeline_elements, self.name)
            return tmp_grid
        else:
            return []

    def generate_sklearn_hyperparameters(self):
        """
        Generates a dictionary according to the sklearn convention of element_name__parameter_name: parameter_value
        """
        self._hyperparameters = {}
        for element in self.pipeline_elements:
            for attribute, value_list in element.hyperparameters.items():
                self._hyperparameters[self.name + '__' + attribute] = value_list

    def _check_hyper(self,BaseEstimator):
        pass


class PreprocessingPipe(PipelineBranch):
    """
        If a preprocessing pipe is added to a PHOTON Hyperpipe, all transformers are applied to the data ONCE
        BEFORE cross validation starts in order to prepare the data.
        Every added element should be a transformer PipelineElement.
    """

    def __init__(self):
        super().__init__('PreprocessingPipe')
        self.has_hyperparameters = False
        self.needs_y = True
        self.needs_covariates = True

    def __iadd__(self, pipe_element):
        """
        Add an element to the sub pipeline
        Returns self

        Parameters
        ----------
        * `pipe_element` [PipelineElement]:
            The transformer object to add.

        """
        if hasattr(pipe_element, "transform"):
            if len(pipe_element.hyperparameters) > 0:
                raise ValueError("A preprocessing transformer must not have any hyperparameter "
                                 "because it is not part of the optimization and cross validation procedure")
            self.pipeline_elements.append(pipe_element)
            self._prepare_pipeline()
        else:
            raise ValueError("Pipeline Element must have transform function")
        return self

    def predict(self, data, **kwargs):
        raise Warning("There is no predict function of the preprocessing pipe, it is a transformer only.")
        pass


class PipelineStacking(PipelineElement):
    """
    Creates a vertical stacking/parallelization of pipeline items.

    The object acts as single pipeline element and encapsulates several vertically stacked other pipeline elements, each
    child receiving the same input data. The data is iteratively distributed to all children, the results are collected
    and horizontally concatenated.

    """
    def __init__(self, name: str, stacking_elements=None, voting: bool=False):
        """
        Creates a new PipelineStacking element.
        Collects all possible hyperparameter combinations of the children

        Parameters
        ----------
        * `name` [str]:
            Give the pipeline element a name
        * `stacking_elements` [list, optional]:
            List of pipeline elements that should run in parallel
        * `voting` [bool]:
            If true, the predictions of the encapsulated pipeline elements are joined to a single prediction
        """
        super(PipelineStacking, self).__init__(name, hyperparameters={}, test_disabled=False, disabled=False,
                                               base_element=True)

        self._hyperparameters = {}
        self.pipe_elements = OrderedDict()
        self.voting = voting
        if stacking_elements is not None:
            for item_to_stack in stacking_elements:
                self.__iadd__(item_to_stack)

        # in case any of the children needs y or the covariates, we have to request them
        self.needs_y = False
        self.needs_covariates = True

    def __iadd__(self, item):
        """
        Adds a new element to the stack.
        Generates sklearn hyperparameter names in order to set the item's hyperparameters in the optimization process.

        * `item` [PipelineElement or PipelineBranch or Hyperpipe]:
            The Element that should be stacked and will run in a vertical parallelization in the original pipe.
        """

        if item.needs_y:
            raise ValueError("Elements in stacking must not transform y because you cannot seriously want to "
                             "concatenate target vectors after parallelization of items finished.")

        self.pipe_elements[item.name] = item
        # self._hyperparameters[item.name] = item.hyperparameters

        # for each configuration
        if not isinstance(item, Hyperpipe):
            tmp_dict = dict(item.hyperparameters)
            for key, element in tmp_dict.items():
                # if isinstance(item, PipelineBranch):
                #     self._hyperparameters[self.name + '__' + item.name + '__' + key] = tmp_dict[key]
                # elif isinstance(item, PipelineElement):
                self._hyperparameters[self.name + '__' + key] = tmp_dict[key]

        return self

    def add(self, item):
        self.__iadd__(item)

    @property
    def hyperparameters(self):
        return self._hyperparameters

    @hyperparameters.setter
    def hyperparameters(self, value):
        """
        Setting hyperparameters does not make sense, only the items that added can be optimized, not the container (self)
        """
        pass

    def generate_config_grid(self):
        tmp_grid = create_global_config_grid(self.pipe_elements.values(), self.name)
        return tmp_grid

    def get_params(self, deep=True):
        all_params = {}
        for name, element in self.pipe_elements.items():
            all_params[name] = element.get_params(deep)
        return all_params

    def set_params(self, **kwargs):
        """
        Find the particular child and distribute the params to it
        """
        spread_params_dict = {}
        for k, val in kwargs.items():
            splitted_k = k.split('__')
            item_name = splitted_k[0]
            if item_name not in spread_params_dict:
                spread_params_dict[item_name] = {}
            dict_entry = {'__'.join(splitted_k[1::]): val}
            spread_params_dict[item_name].update(dict_entry)

        for name, params in spread_params_dict.items():
            if name in self.pipe_elements:
                self.pipe_elements[name].set_params(**params)
            else:
                Logger().error('NameError: Could not find element ' + name)
                raise NameError('Could not find element ', name)
        return self

    def fit(self, data, targets=None, **kwargs):
        """
        Calls fit iteratively on every child
        """
        for name, element in self.pipe_elements.items():
            # Todo: parallellize fitting
            element.fit(data, targets, **kwargs)
        return self

    def predict(self, data, targets=None, **kwargs):
        """
        Iteratively calls predict on every child.
        """
        # Todo: strategy for concatenating data from different pipes
        # todo: parallelize prediction
        predicted_data = np.array([])
        for name, element in self.pipe_elements.items():
            element_transform = element.predict(data, **kwargs)
            predicted_data = PipelineStacking.stack_data(predicted_data, element_transform)
        if self.voting:
            if hasattr(predicted_data, 'shape'):
                if len(predicted_data.shape) > 1:
                    predicted_data = np.mean(predicted_data, axis=1).astype(int)
        return predicted_data, targets, kwargs

    def predict_proba(self, data, **kwargs):
        """
        Predict probabilities for every pipe element and
        stack them together. Alternatively, do voting instead.
        """
        predicted_data = np.array([])
        for name, element in self.pipe_elements.items():
            element_transform = element.predict_proba(data)
            predicted_data = PipelineStacking.stack_data(predicted_data, element_transform)
        if self.voting:
            if hasattr(predicted_data, 'shape'):
                if len(predicted_data.shape) > 1:
                    predicted_data = np.mean(predicted_data, axis=1).astype(int)
        return predicted_data

    def transform(self, data, targets=None, **kwargs):
        """
        Calls transform on every child.

        If the encapsulated child is a hyperpipe, also calls predict on the last element in the pipeline.
        """
        transformed_data = np.array([])
        for name, element in self.pipe_elements.items():
            # if it is a hyperpipe with a final estimator, we want to use predict:
                element_transform, _, _ = element.transform(data, targets, **kwargs)
                transformed_data = PipelineStacking.stack_data(transformed_data, element_transform)

        return transformed_data, targets, kwargs

    def copy_me(self):
        ps = PipelineStacking(self.name, voting=self.voting)
        for name, element in self.pipe_elements.items():
            new_element = element.copy_me()
            ps += new_element
        ps.base_element = self.base_element
        return ps

    @classmethod
    def stack_data(cls, a, b):
        """
        Helper method to horizontally join the outcome of each child

        Parameters
        ----------
        * `a` [ndarray]:
            The existing matrix
        * `b` [ndarray]:
            The matrix that is to be attached horizontally

        Returns
        -------
        New matrix, that is a and b horizontally joined

        """
        if a is None or (isinstance(a, np.ndarray) and a.size == 0):
            a = b
        else:
            # Todo: check for right dimensions!
            if a.ndim == 1 and b.ndim == 1:
                a = np.column_stack((a, b))
            else:
                if b.ndim == 1:
                    b = np.reshape(b, (b.shape[0], 1))
                # a = np.concatenate((a, b), 1)
                a = np.concatenate((a, b), axis=1)
        return a

    def score(self, X_test, y_test):
        """
        Calculate accuracy for predictions made with this object.
        This function should probably never be called.

        """
        # Todo: invent strategy for this ?
        # raise BaseException('PipelineStacking.score should probably never be reached.')
        # return 16
        predicted = self.predict(X_test)

        return accuracy_score(y_test, predicted)

    def inverse_transform(self, X, y, **kwargs):
        raise NotImplementedError("Inverse Transform is not yet implemented for a Stacking Element in PHOTON")

    def _check_hyper(self,BaseEstimator):
        pass

class PipelineSwitch(PipelineElement):
    """
    This class encapsulates several pipeline elements that belong at the same step of the pipeline,
    competing for being the best choice.

    If for example you want to find out if preprocessing A or preprocessing B is better at this position in the pipe.
    Or you want to test if a tree outperforms the good old SVM.

    ATTENTION: This class is a construct that may be convenient but is not suitable for any complex optimizations.
    Currently it only works for grid_search and the derived optimization strategies.
    USE THIS ONLY FOR RAPID PROTOTYPING AND PRELIMINARY RESULTS

    The class acts as if it is a single entity. Tt joins the hyperparamater combinations of each encapsulated element to
    a single, big combination grid. Each hyperparameter combination from that grid gets a number. Then the PipelineSwitch
    object publishes the numbers to be chosen as the object's hyperparameter. When a new number is chosen from the
    optimizer, it internally activates the belonging element and sets the element's parameter to the hyperparameter
    combination. In that way, each of the elements is tested in all its configurations at the same position in the
    pipeline. From the outside, the process and the optimizer only sees one parameter of the PipelineSwitch, that is
    the an integer indicating which item of the hyperparameter combination grid is currently active.

    """

    def __init__(self, name: str, pipeline_element_list: list = None):
        """
        Creates a new PipelineSwitch object and generated the hyperparameter combination grid

        Parameters
        ----------
        * `name` [str]:
            How the element is called in the pipeline
        * `pipeline_element_list` [list, optional]:
            The competing pipeline elements
        * `_estimator_type:
            Used for validation purposes, either classifier or regressor

        """
        self.name = name
        self.sklearn_name = self.name + "__current_element"
        self._hyperparameters = {}
        self._current_element = (1, 1)
        self.pipeline_element_configurations = []
        self._estimator_type = 'regressor'
        self.base_element = None
        self.disabled = False
        self.test_disabled = False
        self.batch_size = 0

        self.needs_y = False
        self.needs_covariates = False
        # we assume we test models against each other, but only guessing
        self.is_estimator = True
        self.is_transformer = True

        self.pipeline_element_dict = {}

        if pipeline_element_list:
            self.pipeline_element_list = pipeline_element_list
            self.generate_private_config_grid()
            for p_element in pipeline_element_list:
                self.pipeline_element_dict[p_element.name] = p_element
        else:
            self.pipeline_element_list = []

    def __iadd__(self, pipeline_element):
        """
        Add a new estimator or transformer object to the switch container. All items change positions during testing.

        Parameters
        ----------
        * `pipeline_element` [PipelineElement]:
            Item that should be tested against other competing elements at that position in the pipeline.
        """
        if hasattr(pipeline_element, "is_estimator"):
            self.is_estimator = pipeline_element.is_estimator
        else:
            Logger().warn("Could not find out if pipeline switch is an estimator element, so assuming it is")
            self.is_estimator = True
        if hasattr(pipeline_element, "is_transformer"):
            self.is_transformer = pipeline_element.is_transformer
        else:
            Logger().warn("Could not find out if pipeline switch is an transformer element, so assuming it is not.")
            self.is_estimator = False
        self.pipeline_element_list.append(pipeline_element)
        if not pipeline_element.name in self.pipeline_element_dict:
            self.pipeline_element_dict[pipeline_element.name] = pipeline_element
        else:
            error_msg = "Already added a pipeline element with that name to the pipeline switch " + self.name
            Logger().error(error_msg)
            raise Exception(error_msg)
        self.generate_private_config_grid()
        return self

    def add(self, pipeline_element):
        """
        Add a new estimator or transformer object to the switch container. All items change positions during testing.

        Parameters
        ----------
        * `pipeline_element` [PipelineElement]:
            Item that should be tested against other competing elements at that position in the pipeline.
        """
        self.__iadd__(pipeline_element)

    @property
    def hyperparameters(self):
        # Todo: return actual hyperparameters of all pipeline elements??
        return self._hyperparameters

    @hyperparameters.setter
    def hyperparameters(self, value):
        pass

    def generate_private_config_grid(self):
        # reset
        self.pipeline_element_configurations = []

        # calculate anew
        hyperparameters = []
        # generate possible combinations for each item respectively - do not mix hyperparameters across items
        for i, pipe_element in enumerate(self.pipeline_element_list):
            # distinct_values_config = create_global_config([pipe_element])
            # add pipeline switch name in the config so that the hyperparameters can be set from other classes
            # pipeline switch will give the hyperparameters to the respective child
            # distinct_values_config_copy = {}
            # for config_key, config_value in distinct_values_config.items():
            #     distinct_values_config_copy[self.name + "__" + config_key] = config_value

            element_configurations = pipe_element.generate_config_grid()
            final_configuration_list = []
            if len(element_configurations) == 0:
                final_configuration_list.append({})
            # else:
            for dict_item in element_configurations:
                # copy_of_dict_item = {}
                # for key, value in dict_item.items():
                #     copy_of_dict_item[self.name + '__' + key] = value
                final_configuration_list.append(dict(dict_item))

            self.pipeline_element_configurations.append(final_configuration_list)
            hyperparameters += [(i, nr) for nr in range(len(final_configuration_list))]

        self._hyperparameters = {self.sklearn_name: hyperparameters}

    @property
    def current_element(self):
        return self._current_element

    @current_element.setter
    def current_element(self, value):
        self._current_element = value
        self.base_element = self.pipeline_element_list[self.current_element[0]]
        # pass the right config to the element
        # config = self.pipeline_element_configurations[value[0]][value[1]]
        # self.base_element.set_params(config)
    #
    # @property
    # def base_element(self):
    #     """
    #     Returns the currently active element
    #     """
    #     obj = self.pipeline_element_list[self.current_element[0]]
    #     return obj

    def get_params(self, deep: bool=True):
        if self.base_element:
            return self.base_element.get_params(deep)
        else:
            return {}

    def set_params(self, **kwargs):

        """
        The optimization process sees the amount of possible combinations and chooses one of them.
        Then this class activates the belonging element and prepared the element with the particular chosen configuration.

        """

        config_nr = None
        config = None

        # in case we are operating with grid search
        if self.sklearn_name in kwargs:
            config_nr = kwargs[self.sklearn_name]
        elif 'current_element' in kwargs:
            config_nr = kwargs['current_element']

        # in case we are operating with another optimizer
        if config_nr is None:

            # we need to identify the element to activate by checking for which element the optimizer gave params
            if kwargs is not None:
                config = kwargs
                # ugly hack because subscription is somehow not possible, we use the for loop but break
                for kwargs_key, kwargs_value in kwargs.items():
                    first_element_name = kwargs_key.split("__")[0]
                    self.base_element = self.pipeline_element_dict[first_element_name]
                    break
        else:
            if not isinstance(config_nr, (tuple, list)):
                Logger().error('ValueError: current_element must be of type Tuple')
                raise ValueError('current_element must be of type Tuple')

            # grid search hack
            self.current_element = config_nr
            config = self.pipeline_element_configurations[config_nr[0]][config_nr[1]]

        if config:
            # remove name
            unnamed_config = {}
            for config_key, config_value in config.items():
                key_split = config_key.split('__')
                unnamed_config['__'.join(key_split[1::])] = config_value
            self.base_element.set_params(**unnamed_config)
        return self

    def copy_me(self):

        ps = PipelineSwitch(self.name)
        for element in self.pipeline_element_list:
            new_element = element.copy_me()
            ps += new_element
        ps.base_element = self.base_element
        return ps


    def prettify_config_output(self, config_name, config_value, return_dict=False):

        """
        Makes the sklearn configuration dictionary human readable

        Returns
        -------
        * `prettified_configuration_string` [str]:
            configuration as prettified string or configuration as dict with prettified keys
        """

        if isinstance(config_value, tuple):
            output = self.pipeline_element_configurations[config_value[0]][config_value[1]]
            if not output:
                if return_dict:
                    return {self.pipeline_element_list[config_value[0]].name:None}
                else:
                    return self.pipeline_element_list[config_value[0]].name
            else:
                if return_dict:
                    return output
                return str(output)
        else:
            return super(PipelineSwitch, self).prettify_config_output(config_name, config_value)

    def predict_proba(self, data):
        """
        Predict probabilities
        base element needs predict_proba() function, otherwise throw
        base exception.
        """
        if not self.disabled:
            if hasattr(self.base_element.base_element, 'predict_proba'):
                return self.base_element.predict_proba(data)
            else:
                return None
        return data

    def _check_hyper(self,BaseEstimator):
        pass


class CallbackElement(PhotonNative):

    def __init__(self, name, delegate_function, method_to_monitor='transform'):

        self.needs_covariates = True
        self.needs_y = False
        self.name = name
        self.delegate_function = delegate_function
        self.method_to_monitor = method_to_monitor
        self.hyperparameters = {}
        self.is_transformer = True
        self.is_estimator = False

    def fit(self, X, y=None, **kwargs):
        if self.method_to_monitor == 'fit':
            self.delegate_function(X, y, **kwargs)
        return self

    def transform(self, X, y=None, **kwargs):
        if self.method_to_monitor == 'transform':
            self.delegate_function(X, y, **kwargs)
        return X, y, kwargs

    def copy_me(self):
        return self.__class__(self.name, self.delegate_function, self.method_to_monitor)


class PhotonModelPersistor:

    @staticmethod
    def save_optimum_pipe(hyperpipe, file, password=None):
        """
        Save optimal pipeline only. Complete hyperpipe will no not be saved.

        Parameters
        ----------
        * 'file' [str]:
            File path as string specifying file to save pipeline to
        * 'password' [str]:
            Password used to encrypt the pipeline file

        """
        def save_element(element, element_number, element_name, folder, wrapper_files):
            filename = '_optimum_pipe_' + str(element_number) + '_' + element_name
            element_identifier.append({'element_name': element_name,
                                       'filename': filename})
            if hasattr(element, 'base_element'):
                base_element = element.base_element
            else:
                base_element = element
            if hasattr(base_element, 'save'):
                base_element.save(os.path.join(folder + filename))
                element_identifier[-1]['mode'] = 'custom'
                element_identifier[-1]['wrapper_script'] = os.path.basename(inspect.getfile(base_element.__class__))
                wrapper_files.append(inspect.getfile(base_element.__class__))
                element_identifier[-1]['test_disabled'] = element.test_disabled
                element_identifier[-1]['disabled'] = element.disabled
                element_identifier[-1]['hyperparameters'] = element.hyperparameters

            else:
                try:
                    joblib.dump(element, os.path.join(folder + filename) + '.pkl', compress=1)
                    element_identifier[-1]['mode'] = 'pickle'
                except:
                    raise NotImplementedError("Custom pipeline element must implement .save() method or "
                                              "allow pickle.")
            return wrapper_files

        element_number = 0
        element_identifier = list()
        folder = os.path.splitext(file)[0]
        file = os.path.splitext(file)[0] + '.photon'

        if os.path.exists(folder):
            Logger().warn('The file you specified already exists as a folder.')
        else:
            os.mkdir(folder)
            folder = folder + '/'
        wrapper_files = list()

        if isinstance(hyperpipe.preprocessing_pipe, PreprocessingPipe):
            for element in hyperpipe.preprocessing_pipe.pipeline_elements:
                element_name = element.name
                wrapper_files = save_element(element, element_number, element_name, folder, wrapper_files)
                element_number += 1

        for element_name, element in hyperpipe.optimum_pipe.named_steps.items():
            wrapper_files = save_element(element, element_number, element_name, folder, wrapper_files)
            element_number += 1

        # save pipeline blueprint to make loading of pipeline easier
        with open(folder + '_optimum_pipe_blueprint.pkl', 'wb') as f:
            pickle.dump(element_identifier, f)

        # get all files
        files = glob.glob(folder + '_optimum_pipe_*')

        if password is not None:
            # ToDo: Do this without the need for pyminizip's C++ requirements
            import pyminizip
            pyminizip.compress(files, file, password)
        else:
            with zipfile.ZipFile(file, 'w') as myzip:
                for f in files:
                    myzip.write(f, os.path.basename(f))
                    os.remove(f)
                for f in wrapper_files:
                    myzip.write(f, os.path.splitext(os.path.basename(f))[0] + '.py')
        os.removedirs(folder)


    @staticmethod
    def load_optimum_pipe(file, password=None):
        """
        Load optimal pipeline.


        Parameters
        ----------
        * `file` [str]:
            File path specifying .photon file to load optimal pipeline from

        Returns
        -------
        sklearn Pipeline with all trained photon_pipelines
        """
        if file.endswith('.photon'):
            archive_name = os.path.splitext(file)[0]
            folder = archive_name + '/'
            zf = zipfile.ZipFile(file)
            zf.extractall(folder, pwd=password)
        else:
            raise FileNotFoundError('Specify .photon file that holds PHOTON optimum pipe.')
        
        with open(folder + '_optimum_pipe_blueprint.pkl', 'rb') as f:
            setup_info = pickle.load(f)
            element_list = list()
            for element_info in setup_info:
                if element_info['mode'] == 'custom':
                    spec = importlib.util.spec_from_file_location(element_info['element_name'],
                                                                  folder + element_info['wrapper_script'])
                    imported_module = importlib.util.module_from_spec(spec)
                    spec.loader.exec_module(imported_module)
                    base_element = getattr(imported_module, element_info['element_name'])
                    custom_element = PipelineElement(name=element_info['element_name'], base_element=base_element(),
                                                     hyperparameters=element_info['hyperparameters'],
                                                     test_disabled=element_info['test_disabled'],
                                                     disabled=element_info['disabled'])
                    custom_element.base_element.load(folder + element_info['filename'])
                    element_list.append((element_info['element_name'], custom_element))
                else:

                    loaded_pipeline_element = joblib.load(folder + element_info['filename'] + '.pkl')

                    # This is only for compatibility with older versions
                    if not hasattr(loaded_pipeline_element, 'needs_y'):
                        if hasattr(loaded_pipeline_element.base_element, 'needs_y'):
                            loaded_pipeline_element.needs_y = loaded_pipeline_element.base_element.needs_y
                        else:
                            loaded_pipeline_element.needs_y = False
                    if not hasattr(loaded_pipeline_element, 'needs_covariates'):
                        if hasattr(loaded_pipeline_element.base_element, 'needs_covariates'):
                            loaded_pipeline_element.needs_covariates = loaded_pipeline_element.base_element.needs_covariates
                        else:
                            loaded_pipeline_element.needs_covariates = False

                    loaded_pipeline_element.is_transformer = hasattr(loaded_pipeline_element.base_element, "transform")
                    loaded_pipeline_element.is_estimator = hasattr(loaded_pipeline_element.base_element, "predict")

                    element_list.append((element_info['element_name'], loaded_pipeline_element))

            # delete unpacked folder to clean up
            # ToDo: Don't unpack at all, but use PHOTON file directly
            from shutil import rmtree
            rmtree(folder, ignore_errors=True)

        return PhotonPipeline(element_list)
